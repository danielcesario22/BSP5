{%- import "rl_components_template.py.j2" as rl_components -%}
import tensorflow as tf
from tf_agents.utils import common
from tf_agents.environments import suite_gym
from tf_agents.environments import tf_py_environment
from metrics import {{ model.result.metrics | join(', ') }}
{%- for agent_type in agent_types %}
from {{agent_type}}_trainer import {{agent_type|upper}}Trainer
{%- endfor %}
{%- set agents = model.agents%}
{%- set old_agent_name = agents[0].name%}
{%- set ns = namespace(count=1) %}

# Agent trainer configuartions
trainer_configs=[]

{%- for agent in agents%}
{%- set name = agent.name %}
{%- set hyper_param = agent.hyper_param %}
{%- set agent_config = agent.agent_config %}
{%- if name != old_agent_name  %} {%- set ns.count = 1 %} {%- endif %}
{{name}}_trainer_config_{{ ns.count }} = {
     "trainer":{{ name|upper }}Trainer,
     "agent_name":"{{ name|upper }} Agent {{ns.count}}",
     "agent_config":{
          "fc_layer_params":({{ agent_config.layer_params | join(', ') }},),
          "loss_function":{{rl_components.get_loss_function(agent_config.loss_function)}} 
     },
     "hyper_param":{
          "learning_rate":{{hyper_param.learning_rate}},
          "optimizer":{{rl_components.get_optimizer(hyper_param.optimizer)}} ,
          "num_iterations":{{hyper_param.num_iterations}},
          "collect_steps_per_iteration":{{hyper_param.collect_steps_per_iteration}},
          "log_interval":{{hyper_param.log_interval}},
          "eval_interval":{{hyper_param.eval_interval}},
          "replay_buffer_capacity":{{hyper_param.replay_buffer_capacity}},
          "batch_size":{{hyper_param.batch_size}}
     }
}
trainer_configs.append({{name}}_trainer_config_{{ ns.count }})
{%- set old_agent_name = name%}
{%- set ns.count = ns.count + 1%}
{%- endfor %}
 
eval_param = {
     "metrics":{ {%- for metric in model.result.metrics %} "{{metric}}":{{metric}}{%- endfor%} },
     "num_eval_episodes": {{model.result.num_eval_episodes}}
}

def main():
     # Set up the environment
     env_name = '{{model.environment.id}}'
     train_py_env = suite_gym.load(env_name)
     eval_py_env = suite_gym.load(env_name)
     train_env = tf_py_environment.TFPyEnvironment(train_py_env)
     eval_env = tf_py_environment.TFPyEnvironment(eval_py_env)

     trainers = []

     for trainer_config in trainer_configs:
          trainers.append(trainer_config["trainer"](
                    trainer_config,
                    eval_param,
                    train_env,
                    eval_env))
     results={}
     for trainer in trainers:
          trainer.train()
          result= trainer.evaluate()
          results[trainer.agent_name]= result


     # Display results
     column_width= 20
     line=f'{"Results":<{column_width}}'
     for agent_name in results.keys():
          line+=f'{agent_name:<{column_width}}'
     print(line)
     for metric in results[list(results.keys())[0]].keys():
          line=f'{metric:<{column_width}}'
          for agent_name in results.keys():
               formatted_result = f"{results[agent_name][metric]:.2f}"  
               trimmed_result = formatted_result.rstrip('0').rstrip('.') if '.' in formatted_result else formatted_result
               line+=f'{trimmed_result:<{column_width}}'
          print(line)


if __name__ == "__main__":
     main()


     
     


